{"ast":null,"code":"// Tax rates by jurisdiction\nexport const taxRates = {\n  'US-CA': {\n    rate: 8.5,\n    name: 'California'\n  },\n  'US-NY': {\n    rate: 8.875,\n    name: 'New York'\n  },\n  'US-TX': {\n    rate: 6.25,\n    name: 'Texas'\n  },\n  'US-FL': {\n    rate: 6.0,\n    name: 'Florida'\n  },\n  'CA-ON': {\n    rate: 13.0,\n    name: 'Ontario'\n  },\n  'CA-BC': {\n    rate: 12.0,\n    name: 'British Columbia'\n  },\n  'CA-QC': {\n    rate: 14.975,\n    name: 'Quebec'\n  },\n  'UK-': {\n    rate: 20.0,\n    name: 'United Kingdom'\n  }\n};\n\n// Tax exemption rules\nexport const taxRules = {\n  'US-CA': [{\n    name: 'Digital Products Exemption',\n    description: 'Some digital products are exempt from sales tax in California',\n    applies: product => ['E-book', 'Digital Media'].includes(product.type),\n    modify: rate => 0 // Exempt\n  }, {\n    name: 'SaaS Rule',\n    description: 'SaaS products are taxable in California',\n    applies: product => product.type === 'Digital Software' && product.name.toLowerCase().includes('saas'),\n    modify: rate => rate // Standard rate\n  }],\n  'US-NY': [{\n    name: 'Educational Materials Exemption',\n    description: 'Educational materials are exempt from sales tax in New York',\n    applies: product => product.type === 'E-book' && product.name.toLowerCase().includes('education'),\n    modify: rate => 0 // Exempt\n  }]\n};\n\n// Calculate tax for a set of products\nexport const calculateTax = (products, customerLocation) => {\n  // Validate inputs\n  if (!products || products.length === 0) {\n    throw new Error('No products provided');\n  }\n  if (!customerLocation || !customerLocation.country || !customerLocation.state_province) {\n    throw new Error('Invalid customer location');\n  }\n\n  // Calculate subtotal\n  const subtotal = products.reduce((sum, product) => {\n    return sum + product.unit_price * product.quantity;\n  }, 0);\n\n  // Determine tax rate based on location and product types\n  let taxRate = 0;\n\n  // Simple mock tax rates based on state\n  const stateTaxRates = {\n    'CA': 8.25,\n    // California\n    'NY': 4.5,\n    // New York\n    'TX': 6.25,\n    // Texas\n    'FL': 6.0 // Florida\n  };\n  taxRate = stateTaxRates[customerLocation.state_province] || 0;\n\n  // Check for exemptions (simplified mock logic)\n  // In a real app, this would check against tax rules in the database\n  const hasExemptProducts = products.some(product => {\n    // E-books are exempt in NY\n    return product.product_type === 'E-book' && customerLocation.state_province === 'NY';\n  });\n  if (hasExemptProducts) {\n    // If there are exempt products, we'd need more complex calculation\n    // For this mock, we'll just reduce the tax rate\n    taxRate = taxRate / 2;\n  }\n\n  // Calculate tax amount\n  const taxAmount = subtotal * taxRate / 100;\n\n  // Calculate total\n  const total = subtotal + taxAmount;\n  return {\n    subtotal,\n    tax_rate: taxRate,\n    tax_amount: taxAmount,\n    total\n  };\n};\n\n// Apply tax rules to a specific product\nexport const calculateTaxWithRules = (product, customerLocation, subtotal = null) => {\n  var _taxRates$locationKey;\n  const locationKey = `${customerLocation.country}-${customerLocation.state || ''}`;\n  const baseRate = ((_taxRates$locationKey = taxRates[locationKey]) === null || _taxRates$locationKey === void 0 ? void 0 : _taxRates$locationKey.rate) || 0;\n  const rules = taxRules[locationKey] || [];\n\n  // If no subtotal provided, calculate it\n  const productSubtotal = subtotal !== null ? subtotal : parseFloat(product.price) * parseInt(product.quantity);\n\n  // Check if any rules apply to this product\n  for (const rule of rules) {\n    if (rule.applies(product)) {\n      const modifiedRate = rule.modify(baseRate);\n      return productSubtotal * modifiedRate / 100;\n    }\n  }\n\n  // No rules apply, use standard rate\n  return productSubtotal * baseRate / 100;\n};\n\n// Economic nexus thresholds by jurisdiction\nexport const nexusThresholds = {\n  'US-CA': {\n    revenue: 500000,\n    transactions: 0\n  },\n  'US-NY': {\n    revenue: 500000,\n    transactions: 100\n  },\n  'US-TX': {\n    revenue: 500000,\n    transactions: 0\n  },\n  'US-FL': {\n    revenue: 100000,\n    transactions: 200\n  }\n};\n\n// Determine if company has nexus in a jurisdiction\nexport const determineNexus = (company, jurisdiction) => {\n  if (!nexusThresholds[jurisdiction]) {\n    return false;\n  }\n\n  // Check if company exceeds thresholds\n  const stateData = company.salesByState[jurisdiction] || {\n    revenue: 0,\n    transactions: 0\n  };\n  const threshold = nexusThresholds[jurisdiction];\n  if (!threshold) return false;\n  return stateData.revenue >= threshold.revenue || threshold.transactions > 0 && stateData.transactions >= threshold.transactions;\n};\n\n// Calculate VAT for international sales\nexport const calculateVAT = (product, customerLocation) => {\n  const vatRates = {\n    'UK': 20,\n    'EU-DE': 19,\n    'EU-FR': 20,\n    'EU-ES': 21\n  };\n\n  // B2B vs B2C determination (affects VAT in EU)\n  const isB2B = customerLocation.vatId ? true : false;\n\n  // Reverse charge mechanism for B2B within EU\n  if (isB2B && customerLocation.country.startsWith('EU-')) {\n    return 0; // Reverse charge applies\n  }\n  return vatRates[customerLocation.country] || 0;\n};","map":{"version":3,"names":["taxRates","rate","name","taxRules","description","applies","product","includes","type","modify","toLowerCase","calculateTax","products","customerLocation","length","Error","country","state_province","subtotal","reduce","sum","unit_price","quantity","taxRate","stateTaxRates","hasExemptProducts","some","product_type","taxAmount","total","tax_rate","tax_amount","calculateTaxWithRules","_taxRates$locationKey","locationKey","state","baseRate","rules","productSubtotal","parseFloat","price","parseInt","rule","modifiedRate","nexusThresholds","revenue","transactions","determineNexus","company","jurisdiction","stateData","salesByState","threshold","calculateVAT","vatRates","isB2B","vatId","startsWith"],"sources":["/Users/clarafication/Desktop/MY NEW NEW COMPUTER/Coding/E-Commerce-Tax-Calculator/client/src/services/TaxCalculation/taxCalculationService.js"],"sourcesContent":["// Tax rates by jurisdiction\nexport const taxRates = {\n  'US-CA': { rate: 8.5, name: 'California' },\n  'US-NY': { rate: 8.875, name: 'New York' },\n  'US-TX': { rate: 6.25, name: 'Texas' },\n  'US-FL': { rate: 6.0, name: 'Florida' },\n  'CA-ON': { rate: 13.0, name: 'Ontario' },\n  'CA-BC': { rate: 12.0, name: 'British Columbia' },\n  'CA-QC': { rate: 14.975, name: 'Quebec' },\n  'UK-': { rate: 20.0, name: 'United Kingdom' },\n};\n\n// Tax exemption rules\nexport const taxRules = {\n  'US-CA': [\n    { \n      name: 'Digital Products Exemption',\n      description: 'Some digital products are exempt from sales tax in California',\n      applies: (product) => ['E-book', 'Digital Media'].includes(product.type),\n      modify: (rate) => 0 // Exempt\n    },\n    {\n      name: 'SaaS Rule',\n      description: 'SaaS products are taxable in California',\n      applies: (product) => \n        product.type === 'Digital Software' && \n        product.name.toLowerCase().includes('saas'),\n      modify: (rate) => rate // Standard rate\n    }\n  ],\n  'US-NY': [\n    {\n      name: 'Educational Materials Exemption',\n      description: 'Educational materials are exempt from sales tax in New York',\n      applies: (product) => \n        product.type === 'E-book' && \n        product.name.toLowerCase().includes('education'),\n      modify: (rate) => 0 // Exempt\n    }\n  ]\n};\n\n// Calculate tax for a set of products\nexport const calculateTax = (products, customerLocation) => {\n  // Validate inputs\n  if (!products || products.length === 0) {\n    throw new Error('No products provided');\n  }\n  \n  if (!customerLocation || !customerLocation.country || !customerLocation.state_province) {\n    throw new Error('Invalid customer location');\n  }\n  \n  // Calculate subtotal\n  const subtotal = products.reduce((sum, product) => {\n    return sum + (product.unit_price * product.quantity);\n  }, 0);\n  \n  // Determine tax rate based on location and product types\n  let taxRate = 0;\n  \n  // Simple mock tax rates based on state\n  const stateTaxRates = {\n    'CA': 8.25, // California\n    'NY': 4.5,  // New York\n    'TX': 6.25, // Texas\n    'FL': 6.0   // Florida\n  };\n  \n  taxRate = stateTaxRates[customerLocation.state_province] || 0;\n  \n  // Check for exemptions (simplified mock logic)\n  // In a real app, this would check against tax rules in the database\n  const hasExemptProducts = products.some(product => {\n    // E-books are exempt in NY\n    return product.product_type === 'E-book' && customerLocation.state_province === 'NY';\n  });\n  \n  if (hasExemptProducts) {\n    // If there are exempt products, we'd need more complex calculation\n    // For this mock, we'll just reduce the tax rate\n    taxRate = taxRate / 2;\n  }\n  \n  // Calculate tax amount\n  const taxAmount = (subtotal * taxRate) / 100;\n  \n  // Calculate total\n  const total = subtotal + taxAmount;\n  \n  return {\n    subtotal,\n    tax_rate: taxRate,\n    tax_amount: taxAmount,\n    total\n  };\n};\n\n// Apply tax rules to a specific product\nexport const calculateTaxWithRules = (product, customerLocation, subtotal = null) => {\n  const locationKey = `${customerLocation.country}-${customerLocation.state || ''}`;\n  const baseRate = taxRates[locationKey]?.rate || 0;\n  const rules = taxRules[locationKey] || [];\n  \n  // If no subtotal provided, calculate it\n  const productSubtotal = subtotal !== null ? \n    subtotal : \n    parseFloat(product.price) * parseInt(product.quantity);\n  \n  // Check if any rules apply to this product\n  for (const rule of rules) {\n    if (rule.applies(product)) {\n      const modifiedRate = rule.modify(baseRate);\n      return (productSubtotal * modifiedRate) / 100;\n    }\n  }\n  \n  // No rules apply, use standard rate\n  return (productSubtotal * baseRate) / 100;\n};\n\n// Economic nexus thresholds by jurisdiction\nexport const nexusThresholds = {\n  'US-CA': { revenue: 500000, transactions: 0 },\n  'US-NY': { revenue: 500000, transactions: 100 },\n  'US-TX': { revenue: 500000, transactions: 0 },\n  'US-FL': { revenue: 100000, transactions: 200 }\n};\n\n// Determine if company has nexus in a jurisdiction\nexport const determineNexus = (company, jurisdiction) => {\n  if (!nexusThresholds[jurisdiction]) {\n    return false;\n  }\n  \n  // Check if company exceeds thresholds\n  const stateData = company.salesByState[jurisdiction] || { revenue: 0, transactions: 0 };\n  const threshold = nexusThresholds[jurisdiction];\n  \n  if (!threshold) return false;\n  \n  return stateData.revenue >= threshold.revenue || \n         (threshold.transactions > 0 && stateData.transactions >= threshold.transactions);\n};\n\n// Calculate VAT for international sales\nexport const calculateVAT = (product, customerLocation) => {\n  const vatRates = {\n    'UK': 20,\n    'EU-DE': 19,\n    'EU-FR': 20,\n    'EU-ES': 21\n  };\n  \n  // B2B vs B2C determination (affects VAT in EU)\n  const isB2B = customerLocation.vatId ? true : false;\n  \n  // Reverse charge mechanism for B2B within EU\n  if (isB2B && customerLocation.country.startsWith('EU-')) {\n    return 0; // Reverse charge applies\n  }\n  \n  return vatRates[customerLocation.country] || 0;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}