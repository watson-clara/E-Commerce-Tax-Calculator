{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL, USE_MOCK_DATA } from '../../config';\n\n// Mock tax calculation function\nconst mockCalculateTax = formData => {\n  // Calculate subtotal\n  const subtotal = formData.items.reduce((total, item) => {\n    return total + parseFloat(item.unit_price) * parseInt(item.quantity);\n  }, 0);\n\n  // Determine tax rate based on jurisdiction and product types\n  let taxRate = 0;\n\n  // Simple mock tax rules\n  switch (formData.jurisdiction_id) {\n    case '1':\n      // California\n      taxRate = 0.0825; // 8.25%\n      break;\n    case '2':\n      // New York\n      // Check if any items are exempt (e-books in NY)\n      const hasEbooks = formData.items.some(item => item.product_type === 'E-book');\n      if (hasEbooks && formData.items.length === 1) {\n        taxRate = 0; // E-books are exempt in NY\n      } else {\n        taxRate = 0.08875; // 8.875%\n      }\n      break;\n    case '3':\n      // Texas\n      taxRate = 0.0625; // 6.25%\n      break;\n    case '4':\n      // Washington\n      taxRate = 0.065; // 6.5%\n      break;\n    case '5':\n      // Florida\n      taxRate = 0.06; // 6%\n      break;\n    default:\n      taxRate = 0.05;\n    // Default 5%\n  }\n\n  // Calculate tax amount\n  const taxAmount = subtotal * taxRate;\n\n  // Calculate total\n  const totalAmount = subtotal + taxAmount;\n\n  // Create tax breakdown\n  const taxBreakdown = [{\n    tax_type: 'Sales Tax',\n    rate: taxRate,\n    amount: taxAmount\n  }];\n\n  // Simulate API delay\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        subtotal: subtotal.toFixed(2),\n        tax_amount: taxAmount.toFixed(2),\n        total_amount: totalAmount.toFixed(2),\n        tax_breakdown: taxBreakdown,\n        tax_rate: taxRate\n      });\n    }, 500);\n  });\n};\n\n// Mock save transaction function\nconst mockSaveTransaction = transactionData => {\n  console.log('Transaction saved:', transactionData);\n\n  // Simulate API delay\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        id: Math.floor(Math.random() * 1000) + 1\n      });\n    }, 500);\n  });\n};\n\n// Calculate tax\nexport const calculateTax = async formData => {\n  if (USE_MOCK_DATA) {\n    return mockCalculateTax(formData);\n  }\n  try {\n    const response = await axios.post(`${API_BASE_URL}/tax/calculate`, formData);\n    return response.data;\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    throw error;\n  }\n};\n\n// Save transaction\nexport const saveTransaction = async transactionData => {\n  if (USE_MOCK_DATA) {\n    return mockSaveTransaction(transactionData);\n  }\n  try {\n    const response = await axios.post(`${API_BASE_URL}/transactions`, transactionData);\n    return response.data;\n  } catch (error) {\n    console.error('Error saving transaction:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","USE_MOCK_DATA","mockCalculateTax","formData","subtotal","items","reduce","total","item","parseFloat","unit_price","parseInt","quantity","taxRate","jurisdiction_id","hasEbooks","some","product_type","length","taxAmount","totalAmount","taxBreakdown","tax_type","rate","amount","Promise","resolve","setTimeout","toFixed","tax_amount","total_amount","tax_breakdown","tax_rate","mockSaveTransaction","transactionData","console","log","success","id","Math","floor","random","calculateTax","response","post","data","error","saveTransaction"],"sources":["/Users/clarafication/Desktop/MY NEW NEW COMPUTER/Coding/E-Commerce-Tax-Calculator/client/src/services/TaxCalculatorService/taxCalculatorService.js"],"sourcesContent":["import axios from 'axios';\nimport { API_BASE_URL, USE_MOCK_DATA } from '../../config';\n\n// Mock tax calculation function\nconst mockCalculateTax = (formData) => {\n  // Calculate subtotal\n  const subtotal = formData.items.reduce((total, item) => {\n    return total + (parseFloat(item.unit_price) * parseInt(item.quantity));\n  }, 0);\n  \n  // Determine tax rate based on jurisdiction and product types\n  let taxRate = 0;\n  \n  // Simple mock tax rules\n  switch (formData.jurisdiction_id) {\n    case '1': // California\n      taxRate = 0.0825; // 8.25%\n      break;\n    case '2': // New York\n      // Check if any items are exempt (e-books in NY)\n      const hasEbooks = formData.items.some(item => item.product_type === 'E-book');\n      if (hasEbooks && formData.items.length === 1) {\n        taxRate = 0; // E-books are exempt in NY\n      } else {\n        taxRate = 0.08875; // 8.875%\n      }\n      break;\n    case '3': // Texas\n      taxRate = 0.0625; // 6.25%\n      break;\n    case '4': // Washington\n      taxRate = 0.065; // 6.5%\n      break;\n    case '5': // Florida\n      taxRate = 0.06; // 6%\n      break;\n    default:\n      taxRate = 0.05; // Default 5%\n  }\n  \n  // Calculate tax amount\n  const taxAmount = subtotal * taxRate;\n  \n  // Calculate total\n  const totalAmount = subtotal + taxAmount;\n  \n  // Create tax breakdown\n  const taxBreakdown = [\n    {\n      tax_type: 'Sales Tax',\n      rate: taxRate,\n      amount: taxAmount\n    }\n  ];\n  \n  // Simulate API delay\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        subtotal: subtotal.toFixed(2),\n        tax_amount: taxAmount.toFixed(2),\n        total_amount: totalAmount.toFixed(2),\n        tax_breakdown: taxBreakdown,\n        tax_rate: taxRate\n      });\n    }, 500);\n  });\n};\n\n// Mock save transaction function\nconst mockSaveTransaction = (transactionData) => {\n  console.log('Transaction saved:', transactionData);\n  \n  // Simulate API delay\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({ success: true, id: Math.floor(Math.random() * 1000) + 1 });\n    }, 500);\n  });\n};\n\n// Calculate tax\nexport const calculateTax = async (formData) => {\n  if (USE_MOCK_DATA) {\n    return mockCalculateTax(formData);\n  }\n  \n  try {\n    const response = await axios.post(`${API_BASE_URL}/tax/calculate`, formData);\n    return response.data;\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    throw error;\n  }\n};\n\n// Save transaction\nexport const saveTransaction = async (transactionData) => {\n  if (USE_MOCK_DATA) {\n    return mockSaveTransaction(transactionData);\n  }\n  \n  try {\n    const response = await axios.post(`${API_BASE_URL}/transactions`, transactionData);\n    return response.data;\n  } catch (error) {\n    console.error('Error saving transaction:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}