{"ast":null,"code":"// Mock jurisdiction data and service functions\nconst mockJurisdictions = [{\n  id: '1',\n  name: 'California',\n  code: 'US-CA',\n  country: 'US',\n  state_province: 'CA',\n  local_area: '',\n  tax_authority: 'California Department of Tax and Fee Administration'\n}, {\n  id: '2',\n  name: 'New York',\n  code: 'US-NY',\n  country: 'US',\n  state_province: 'NY',\n  local_area: '',\n  tax_authority: 'New York State Department of Taxation and Finance'\n}, {\n  id: '3',\n  name: 'Texas',\n  code: 'US-TX',\n  country: 'US',\n  state_province: 'TX',\n  local_area: '',\n  tax_authority: 'Texas Comptroller of Public Accounts'\n}];\n\n// Get all jurisdictions\nexport const getJurisdictions = async () => {\n  return [...mockJurisdictions];\n};\n\n// Add a new jurisdiction\nexport const addJurisdiction = async jurisdictionData => {\n  const newId = (Math.max(...mockJurisdictions.map(j => parseInt(j.id))) + 1).toString();\n  const newJurisdiction = {\n    ...jurisdictionData,\n    id: newId\n  };\n  mockJurisdictions.push(newJurisdiction);\n  return newJurisdiction;\n};\n\n// Update a jurisdiction\nexport const updateJurisdiction = async (id, jurisdictionData) => {\n  const index = mockJurisdictions.findIndex(j => j.id === id);\n  if (index === -1) {\n    throw new Error('Jurisdiction not found');\n  }\n  mockJurisdictions[index] = {\n    ...jurisdictionData,\n    id\n  };\n  return mockJurisdictions[index];\n};\n\n// Delete a jurisdiction\nexport const deleteJurisdiction = async id => {\n  const index = mockJurisdictions.findIndex(j => j.id === id);\n  if (index === -1) {\n    throw new Error('Jurisdiction not found');\n  }\n  mockJurisdictions.splice(index, 1);\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["mockJurisdictions","id","name","code","country","state_province","local_area","tax_authority","getJurisdictions","addJurisdiction","jurisdictionData","newId","Math","max","map","j","parseInt","toString","newJurisdiction","push","updateJurisdiction","index","findIndex","Error","deleteJurisdiction","splice","success"],"sources":["/Users/clarafication/Desktop/MY NEW NEW COMPUTER/Coding/E-Commerce-Tax-Calculator/client/src/services/JurisdictionService/jurisdictionService.js"],"sourcesContent":["// Mock jurisdiction data and service functions\nconst mockJurisdictions = [\n  {\n    id: '1',\n    name: 'California',\n    code: 'US-CA',\n    country: 'US',\n    state_province: 'CA',\n    local_area: '',\n    tax_authority: 'California Department of Tax and Fee Administration'\n  },\n  {\n    id: '2',\n    name: 'New York',\n    code: 'US-NY',\n    country: 'US',\n    state_province: 'NY',\n    local_area: '',\n    tax_authority: 'New York State Department of Taxation and Finance'\n  },\n  {\n    id: '3',\n    name: 'Texas',\n    code: 'US-TX',\n    country: 'US',\n    state_province: 'TX',\n    local_area: '',\n    tax_authority: 'Texas Comptroller of Public Accounts'\n  }\n];\n\n// Get all jurisdictions\nexport const getJurisdictions = async () => {\n  return [...mockJurisdictions];\n};\n\n// Add a new jurisdiction\nexport const addJurisdiction = async (jurisdictionData) => {\n  const newId = (Math.max(...mockJurisdictions.map(j => parseInt(j.id))) + 1).toString();\n  const newJurisdiction = { ...jurisdictionData, id: newId };\n  mockJurisdictions.push(newJurisdiction);\n  return newJurisdiction;\n};\n\n// Update a jurisdiction\nexport const updateJurisdiction = async (id, jurisdictionData) => {\n  const index = mockJurisdictions.findIndex(j => j.id === id);\n  if (index === -1) {\n    throw new Error('Jurisdiction not found');\n  }\n  mockJurisdictions[index] = { ...jurisdictionData, id };\n  return mockJurisdictions[index];\n};\n\n// Delete a jurisdiction\nexport const deleteJurisdiction = async (id) => {\n  const index = mockJurisdictions.findIndex(j => j.id === id);\n  if (index === -1) {\n    throw new Error('Jurisdiction not found');\n  }\n  mockJurisdictions.splice(index, 1);\n  return { success: true };\n}; "],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAG,CACxB;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,OAAO;EACbC,OAAO,EAAE,IAAI;EACbC,cAAc,EAAE,IAAI;EACpBC,UAAU,EAAE,EAAE;EACdC,aAAa,EAAE;AACjB,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,OAAO;EACbC,OAAO,EAAE,IAAI;EACbC,cAAc,EAAE,IAAI;EACpBC,UAAU,EAAE,EAAE;EACdC,aAAa,EAAE;AACjB,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,OAAO;EACbC,OAAO,EAAE,IAAI;EACbC,cAAc,EAAE,IAAI;EACpBC,UAAU,EAAE,EAAE;EACdC,aAAa,EAAE;AACjB,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,OAAO,CAAC,GAAGR,iBAAiB,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMS,eAAe,GAAG,MAAOC,gBAAgB,IAAK;EACzD,MAAMC,KAAK,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGb,iBAAiB,CAACc,GAAG,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACd,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEgB,QAAQ,CAAC,CAAC;EACtF,MAAMC,eAAe,GAAG;IAAE,GAAGR,gBAAgB;IAAET,EAAE,EAAEU;EAAM,CAAC;EAC1DX,iBAAiB,CAACmB,IAAI,CAACD,eAAe,CAAC;EACvC,OAAOA,eAAe;AACxB,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAOnB,EAAE,EAAES,gBAAgB,KAAK;EAChE,MAAMW,KAAK,GAAGrB,iBAAiB,CAACsB,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKA,EAAE,CAAC;EAC3D,IAAIoB,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACAvB,iBAAiB,CAACqB,KAAK,CAAC,GAAG;IAAE,GAAGX,gBAAgB;IAAET;EAAG,CAAC;EACtD,OAAOD,iBAAiB,CAACqB,KAAK,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMG,kBAAkB,GAAG,MAAOvB,EAAE,IAAK;EAC9C,MAAMoB,KAAK,GAAGrB,iBAAiB,CAACsB,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKA,EAAE,CAAC;EAC3D,IAAIoB,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACAvB,iBAAiB,CAACyB,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;EAClC,OAAO;IAAEK,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}