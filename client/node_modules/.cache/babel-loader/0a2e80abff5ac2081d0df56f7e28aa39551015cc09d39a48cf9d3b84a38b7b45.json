{"ast":null,"code":"// Mock tax rule data and service functions\nconst mockTaxRules = [{\n  id: '1',\n  jurisdiction_id: '1',\n  product_type: 'Digital Software',\n  rule_type: 'Threshold',\n  threshold_value: 100,\n  is_exempt: false,\n  description: 'Sales tax applies only to purchases over $100'\n}, {\n  id: '2',\n  jurisdiction_id: '2',\n  product_type: 'E-book',\n  rule_type: 'Exemption',\n  threshold_value: 0,\n  is_exempt: true,\n  description: 'E-books are exempt from sales tax in New York'\n}, {\n  id: '3',\n  jurisdiction_id: '3',\n  product_type: 'Digital Media',\n  rule_type: 'Special Rate',\n  threshold_value: 0,\n  is_exempt: false,\n  description: 'Digital media has a special reduced tax rate'\n}];\n\n// Get all tax rules\nexport const getTaxRules = async () => {\n  return [...mockTaxRules];\n};\n\n// Add a new tax rule\nexport const addTaxRule = async taxRuleData => {\n  const newId = (Math.max(...mockTaxRules.map(r => parseInt(r.id))) + 1).toString();\n  const newTaxRule = {\n    ...taxRuleData,\n    id: newId\n  };\n  mockTaxRules.push(newTaxRule);\n  return newTaxRule;\n};\n\n// Update a tax rule\nexport const updateTaxRule = async (id, taxRuleData) => {\n  const index = mockTaxRules.findIndex(r => r.id === id);\n  if (index === -1) {\n    throw new Error('Tax rule not found');\n  }\n  mockTaxRules[index] = {\n    ...taxRuleData,\n    id\n  };\n  return mockTaxRules[index];\n};\n\n// Delete a tax rule\nexport const deleteTaxRule = async id => {\n  const index = mockTaxRules.findIndex(r => r.id === id);\n  if (index === -1) {\n    throw new Error('Tax rule not found');\n  }\n  mockTaxRules.splice(index, 1);\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["mockTaxRules","id","jurisdiction_id","product_type","rule_type","threshold_value","is_exempt","description","getTaxRules","addTaxRule","taxRuleData","newId","Math","max","map","r","parseInt","toString","newTaxRule","push","updateTaxRule","index","findIndex","Error","deleteTaxRule","splice","success"],"sources":["/Users/clarafication/Desktop/MY NEW NEW COMPUTER/Coding/E-Commerce-Tax-Calculator/client/src/services/TaxRuleService/taxRuleService.js"],"sourcesContent":["// Mock tax rule data and service functions\nconst mockTaxRules = [\n  {\n    id: '1',\n    jurisdiction_id: '1',\n    product_type: 'Digital Software',\n    rule_type: 'Threshold',\n    threshold_value: 100,\n    is_exempt: false,\n    description: 'Sales tax applies only to purchases over $100'\n  },\n  {\n    id: '2',\n    jurisdiction_id: '2',\n    product_type: 'E-book',\n    rule_type: 'Exemption',\n    threshold_value: 0,\n    is_exempt: true,\n    description: 'E-books are exempt from sales tax in New York'\n  },\n  {\n    id: '3',\n    jurisdiction_id: '3',\n    product_type: 'Digital Media',\n    rule_type: 'Special Rate',\n    threshold_value: 0,\n    is_exempt: false,\n    description: 'Digital media has a special reduced tax rate'\n  }\n];\n\n// Get all tax rules\nexport const getTaxRules = async () => {\n  return [...mockTaxRules];\n};\n\n// Add a new tax rule\nexport const addTaxRule = async (taxRuleData) => {\n  const newId = (Math.max(...mockTaxRules.map(r => parseInt(r.id))) + 1).toString();\n  const newTaxRule = { ...taxRuleData, id: newId };\n  mockTaxRules.push(newTaxRule);\n  return newTaxRule;\n};\n\n// Update a tax rule\nexport const updateTaxRule = async (id, taxRuleData) => {\n  const index = mockTaxRules.findIndex(r => r.id === id);\n  if (index === -1) {\n    throw new Error('Tax rule not found');\n  }\n  mockTaxRules[index] = { ...taxRuleData, id };\n  return mockTaxRules[index];\n};\n\n// Delete a tax rule\nexport const deleteTaxRule = async (id) => {\n  const index = mockTaxRules.findIndex(r => r.id === id);\n  if (index === -1) {\n    throw new Error('Tax rule not found');\n  }\n  mockTaxRules.splice(index, 1);\n  return { success: true };\n}; "],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,eAAe,EAAE,GAAG;EACpBC,YAAY,EAAE,kBAAkB;EAChCC,SAAS,EAAE,WAAW;EACtBC,eAAe,EAAE,GAAG;EACpBC,SAAS,EAAE,KAAK;EAChBC,WAAW,EAAE;AACf,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPC,eAAe,EAAE,GAAG;EACpBC,YAAY,EAAE,QAAQ;EACtBC,SAAS,EAAE,WAAW;EACtBC,eAAe,EAAE,CAAC;EAClBC,SAAS,EAAE,IAAI;EACfC,WAAW,EAAE;AACf,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPC,eAAe,EAAE,GAAG;EACpBC,YAAY,EAAE,eAAe;EAC7BC,SAAS,EAAE,cAAc;EACzBC,eAAe,EAAE,CAAC;EAClBC,SAAS,EAAE,KAAK;EAChBC,WAAW,EAAE;AACf,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,OAAO,CAAC,GAAGR,YAAY,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC/C,MAAMC,KAAK,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGb,YAAY,CAACc,GAAG,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACd,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEgB,QAAQ,CAAC,CAAC;EACjF,MAAMC,UAAU,GAAG;IAAE,GAAGR,WAAW;IAAET,EAAE,EAAEU;EAAM,CAAC;EAChDX,YAAY,CAACmB,IAAI,CAACD,UAAU,CAAC;EAC7B,OAAOA,UAAU;AACnB,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOnB,EAAE,EAAES,WAAW,KAAK;EACtD,MAAMW,KAAK,GAAGrB,YAAY,CAACsB,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKA,EAAE,CAAC;EACtD,IAAIoB,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;EACvC;EACAvB,YAAY,CAACqB,KAAK,CAAC,GAAG;IAAE,GAAGX,WAAW;IAAET;EAAG,CAAC;EAC5C,OAAOD,YAAY,CAACqB,KAAK,CAAC;AAC5B,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,MAAOvB,EAAE,IAAK;EACzC,MAAMoB,KAAK,GAAGrB,YAAY,CAACsB,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACd,EAAE,KAAKA,EAAE,CAAC;EACtD,IAAIoB,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAAC;EACvC;EACAvB,YAAY,CAACyB,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;EAC7B,OAAO;IAAEK,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}