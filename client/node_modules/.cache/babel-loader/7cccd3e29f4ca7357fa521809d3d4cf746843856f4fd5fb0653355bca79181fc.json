{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL, USE_MOCK_DATA } from '../../config';\n\n// Mock tax calculation function\nconst mockCalculateTax = calculationData => {\n  const {\n    customer,\n    products\n  } = calculationData;\n\n  // Calculate subtotal\n  const subtotal = products.reduce((total, product) => {\n    return total + parseFloat(product.price) * parseInt(product.quantity);\n  }, 0);\n\n  // Determine tax rate based on location and product types\n  let taxRate = 0;\n  let jurisdiction = '';\n  let taxRulesApplied = '';\n\n  // Simple tax rules for mock data\n  if (customer.country === 'US') {\n    switch (customer.state_province) {\n      case 'CA':\n        taxRate = 0.0825; // 8.25%\n        jurisdiction = 'California';\n        taxRulesApplied = 'State and local tax';\n        break;\n      case 'NY':\n        taxRate = 0.0885; // 8.85%\n        jurisdiction = 'New York';\n        taxRulesApplied = 'State and city tax';\n        break;\n      case 'WA':\n        taxRate = 0.065; // 6.5%\n        jurisdiction = 'Washington';\n        taxRulesApplied = 'State tax only';\n        break;\n      case 'TX':\n        taxRate = 0.0625; // 6.25%\n        jurisdiction = 'Texas';\n        taxRulesApplied = 'State tax only';\n        break;\n      default:\n        taxRate = 0.05; // 5% default for other US states\n        jurisdiction = 'United States';\n        taxRulesApplied = 'Default state tax';\n    }\n  } else if (customer.country === 'CA') {\n    taxRate = 0.05; // 5% GST\n    jurisdiction = 'Canada';\n    taxRulesApplied = 'GST only';\n\n    // Add PST/HST for certain provinces\n    if (customer.state_province === 'ON') {\n      taxRate = 0.13; // 13% HST\n      jurisdiction = 'Ontario, Canada';\n      taxRulesApplied = 'HST';\n    } else if (customer.state_province === 'BC') {\n      taxRate = 0.12; // 12% (5% GST + 7% PST)\n      jurisdiction = 'British Columbia, Canada';\n      taxRulesApplied = 'GST + PST';\n    }\n  } else if (customer.country === 'UK') {\n    taxRate = 0.20; // 20% VAT\n    jurisdiction = 'United Kingdom';\n    taxRulesApplied = 'VAT';\n  } else if (customer.country === 'DE' || customer.country === 'FR') {\n    taxRate = 0.19; // 19% VAT\n    jurisdiction = customer.country === 'DE' ? 'Germany' : 'France';\n    taxRulesApplied = 'EU VAT';\n  } else {\n    taxRate = 0; // No tax for other countries in this mock example\n    jurisdiction = 'International';\n    taxRulesApplied = 'No tax applied';\n  }\n\n  // Apply product-specific rules\n  // For example, e-books might be tax-exempt in some jurisdictions\n  const hasEbooks = products.some(p => p.type === 'E-book');\n  if (hasEbooks && (customer.country === 'UK' || customer.state_province === 'NY')) {\n    taxRate = 0;\n    taxRulesApplied = 'E-book exemption';\n  }\n\n  // Calculate tax amount and total\n  const taxAmount = subtotal * taxRate;\n  const total = subtotal + taxAmount;\n\n  // Return calculation result\n  return {\n    subtotal,\n    tax_rate: taxRate,\n    tax_amount: taxAmount,\n    total,\n    jurisdiction,\n    tax_rules_applied: taxRulesApplied\n  };\n};\n\n// Calculate tax\nexport const calculateTax = async calculationData => {\n  if (USE_MOCK_DATA) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockCalculateTax(calculationData);\n  }\n  try {\n    const response = await axios.post(`${API_BASE_URL}/calculate-tax`, calculationData);\n    return response.data;\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    throw error;\n  }\n};\n\n// Get tax rates for a specific jurisdiction and product type\nexport const getTaxRateForJurisdiction = async (jurisdictionId, productType) => {\n  if (USE_MOCK_DATA) {\n    // Mock tax rates by jurisdiction\n    const mockTaxRates = {\n      'us-ca': {\n        rate: 0.0825,\n        name: 'California Sales Tax'\n      },\n      'us-ny': {\n        rate: 0.0885,\n        name: 'New York Sales Tax'\n      },\n      'us-tx': {\n        rate: 0.0625,\n        name: 'Texas Sales Tax'\n      },\n      'ca-on': {\n        rate: 0.13,\n        name: 'Ontario HST'\n      },\n      'uk': {\n        rate: 0.20,\n        name: 'UK VAT'\n      },\n      'default': {\n        rate: 0.05,\n        name: 'Default Tax Rate'\n      }\n    };\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return mockTaxRates[jurisdictionId] || mockTaxRates.default;\n  }\n  try {\n    const response = await axios.get(`${API_BASE_URL}/tax-rates?jurisdiction_id=${jurisdictionId}&product_type=${productType}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tax rate:', error);\n    throw error;\n  }\n};\n\n// Get tax exemptions for a specific jurisdiction\nexport const getTaxExemptions = async jurisdictionId => {\n  if (USE_MOCK_DATA) {\n    // Mock exemptions\n    const mockExemptions = {\n      'us-ca': ['Educational Software', 'Medical Services'],\n      'us-ny': ['E-books', 'Educational Content'],\n      'uk': ['E-books', 'Children\\'s Clothing'],\n      'default': []\n    };\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return mockExemptions[jurisdictionId] || mockExemptions.default;\n  }\n  try {\n    const response = await axios.get(`${API_BASE_URL}/tax-exemptions?jurisdiction_id=${jurisdictionId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tax exemptions:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","USE_MOCK_DATA","mockCalculateTax","calculationData","customer","products","subtotal","reduce","total","product","parseFloat","price","parseInt","quantity","taxRate","jurisdiction","taxRulesApplied","country","state_province","hasEbooks","some","p","type","taxAmount","tax_rate","tax_amount","tax_rules_applied","calculateTax","Promise","resolve","setTimeout","response","post","data","error","console","getTaxRateForJurisdiction","jurisdictionId","productType","mockTaxRates","rate","name","default","get","getTaxExemptions","mockExemptions"],"sources":["/Users/clarafication/Desktop/MY NEW NEW COMPUTER/Coding/E-Commerce-Tax-Calculator/client/src/services/TaxCalculationService/taxCalculationService.js"],"sourcesContent":["import axios from 'axios';\nimport { API_BASE_URL, USE_MOCK_DATA } from '../../config';\n\n// Mock tax calculation function\nconst mockCalculateTax = (calculationData) => {\n  const { customer, products } = calculationData;\n  \n  // Calculate subtotal\n  const subtotal = products.reduce((total, product) => {\n    return total + (parseFloat(product.price) * parseInt(product.quantity));\n  }, 0);\n  \n  // Determine tax rate based on location and product types\n  let taxRate = 0;\n  let jurisdiction = '';\n  let taxRulesApplied = '';\n  \n  // Simple tax rules for mock data\n  if (customer.country === 'US') {\n    switch (customer.state_province) {\n      case 'CA':\n        taxRate = 0.0825; // 8.25%\n        jurisdiction = 'California';\n        taxRulesApplied = 'State and local tax';\n        break;\n      case 'NY':\n        taxRate = 0.0885; // 8.85%\n        jurisdiction = 'New York';\n        taxRulesApplied = 'State and city tax';\n        break;\n      case 'WA':\n        taxRate = 0.065; // 6.5%\n        jurisdiction = 'Washington';\n        taxRulesApplied = 'State tax only';\n        break;\n      case 'TX':\n        taxRate = 0.0625; // 6.25%\n        jurisdiction = 'Texas';\n        taxRulesApplied = 'State tax only';\n        break;\n      default:\n        taxRate = 0.05; // 5% default for other US states\n        jurisdiction = 'United States';\n        taxRulesApplied = 'Default state tax';\n    }\n  } else if (customer.country === 'CA') {\n    taxRate = 0.05; // 5% GST\n    jurisdiction = 'Canada';\n    taxRulesApplied = 'GST only';\n    \n    // Add PST/HST for certain provinces\n    if (customer.state_province === 'ON') {\n      taxRate = 0.13; // 13% HST\n      jurisdiction = 'Ontario, Canada';\n      taxRulesApplied = 'HST';\n    } else if (customer.state_province === 'BC') {\n      taxRate = 0.12; // 12% (5% GST + 7% PST)\n      jurisdiction = 'British Columbia, Canada';\n      taxRulesApplied = 'GST + PST';\n    }\n  } else if (customer.country === 'UK') {\n    taxRate = 0.20; // 20% VAT\n    jurisdiction = 'United Kingdom';\n    taxRulesApplied = 'VAT';\n  } else if (customer.country === 'DE' || customer.country === 'FR') {\n    taxRate = 0.19; // 19% VAT\n    jurisdiction = customer.country === 'DE' ? 'Germany' : 'France';\n    taxRulesApplied = 'EU VAT';\n  } else {\n    taxRate = 0; // No tax for other countries in this mock example\n    jurisdiction = 'International';\n    taxRulesApplied = 'No tax applied';\n  }\n  \n  // Apply product-specific rules\n  // For example, e-books might be tax-exempt in some jurisdictions\n  const hasEbooks = products.some(p => p.type === 'E-book');\n  if (hasEbooks && (customer.country === 'UK' || customer.state_province === 'NY')) {\n    taxRate = 0;\n    taxRulesApplied = 'E-book exemption';\n  }\n  \n  // Calculate tax amount and total\n  const taxAmount = subtotal * taxRate;\n  const total = subtotal + taxAmount;\n  \n  // Return calculation result\n  return {\n    subtotal,\n    tax_rate: taxRate,\n    tax_amount: taxAmount,\n    total,\n    jurisdiction,\n    tax_rules_applied: taxRulesApplied\n  };\n};\n\n// Calculate tax\nexport const calculateTax = async (calculationData) => {\n  if (USE_MOCK_DATA) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockCalculateTax(calculationData);\n  }\n  \n  try {\n    const response = await axios.post(`${API_BASE_URL}/calculate-tax`, calculationData);\n    return response.data;\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    throw error;\n  }\n};\n\n// Get tax rates for a specific jurisdiction and product type\nexport const getTaxRateForJurisdiction = async (jurisdictionId, productType) => {\n  if (USE_MOCK_DATA) {\n    // Mock tax rates by jurisdiction\n    const mockTaxRates = {\n      'us-ca': { rate: 0.0825, name: 'California Sales Tax' },\n      'us-ny': { rate: 0.0885, name: 'New York Sales Tax' },\n      'us-tx': { rate: 0.0625, name: 'Texas Sales Tax' },\n      'ca-on': { rate: 0.13, name: 'Ontario HST' },\n      'uk': { rate: 0.20, name: 'UK VAT' },\n      'default': { rate: 0.05, name: 'Default Tax Rate' }\n    };\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return mockTaxRates[jurisdictionId] || mockTaxRates.default;\n  }\n  \n  try {\n    const response = await axios.get(\n      `${API_BASE_URL}/tax-rates?jurisdiction_id=${jurisdictionId}&product_type=${productType}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tax rate:', error);\n    throw error;\n  }\n};\n\n// Get tax exemptions for a specific jurisdiction\nexport const getTaxExemptions = async (jurisdictionId) => {\n  if (USE_MOCK_DATA) {\n    // Mock exemptions\n    const mockExemptions = {\n      'us-ca': ['Educational Software', 'Medical Services'],\n      'us-ny': ['E-books', 'Educational Content'],\n      'uk': ['E-books', 'Children\\'s Clothing'],\n      'default': []\n    };\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return mockExemptions[jurisdictionId] || mockExemptions.default;\n  }\n  \n  try {\n    const response = await axios.get(`${API_BASE_URL}/tax-exemptions?jurisdiction_id=${jurisdictionId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tax exemptions:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}