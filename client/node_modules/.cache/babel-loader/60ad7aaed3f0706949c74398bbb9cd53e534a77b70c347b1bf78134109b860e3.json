{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL, USE_MOCK_DATA } from '../../config';\n\n// Mock transaction data and service functions\nconst mockTransactions = [{\n  id: '1',\n  transaction_date: '2023-05-15',\n  customer_name: 'John Doe',\n  customer_location: {\n    country: 'US',\n    state_province: 'CA'\n  },\n  items: [{\n    product_id: '101',\n    product_name: 'Premium Software License',\n    product_type: 'Digital Software',\n    quantity: 1,\n    unit_price: 199.99\n  }],\n  subtotal: 199.99,\n  tax_amount: 16.50,\n  total_amount: 216.49,\n  tax_rate: 8.25\n}, {\n  id: '2',\n  transaction_date: '2023-05-20',\n  customer_name: 'Jane Smith',\n  customer_location: {\n    country: 'US',\n    state_province: 'NY'\n  },\n  items: [{\n    product_id: '202',\n    product_name: 'E-book: Web Development',\n    product_type: 'E-book',\n    quantity: 1,\n    unit_price: 29.99\n  }, {\n    product_id: '203',\n    product_name: 'E-book: UX Design',\n    product_type: 'E-book',\n    quantity: 1,\n    unit_price: 24.99\n  }],\n  subtotal: 54.98,\n  tax_amount: 0,\n  total_amount: 54.98,\n  tax_rate: 0\n}, {\n  id: '3',\n  transaction_date: '2023-06-01',\n  customer_name: 'Bob Johnson',\n  customer_location: {\n    country: 'US',\n    state_province: 'TX'\n  },\n  items: [{\n    product_id: '301',\n    product_name: 'Digital Music Album',\n    product_type: 'Digital Media',\n    quantity: 1,\n    unit_price: 12.99\n  }],\n  subtotal: 12.99,\n  tax_amount: 0.81,\n  total_amount: 13.80,\n  tax_rate: 6.25\n}];\n\n// Get all transactions\nexport const getTransactions = async () => {\n  if (USE_MOCK_DATA) {\n    return [...mockTransactions];\n  }\n  try {\n    const response = await axios.get(`${API_BASE_URL}/transactions`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching transactions:', error);\n    throw error;\n  }\n};\n\n// Get a transaction by ID\nexport const getTransactionById = async id => {\n  if (USE_MOCK_DATA) {\n    const transaction = mockTransactions.find(t => t.id === id);\n    if (!transaction) {\n      throw new Error('Transaction not found');\n    }\n    return {\n      ...transaction\n    };\n  }\n  try {\n    const response = await axios.get(`${API_BASE_URL}/transactions/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching transaction ${id}:`, error);\n    throw error;\n  }\n};\n\n// Create a new transaction\nexport const createTransaction = async transactionData => {\n  if (USE_MOCK_DATA) {\n    const newId = (Math.max(...mockTransactions.map(t => parseInt(t.id))) + 1).toString();\n    const newTransaction = {\n      ...transactionData,\n      id: newId\n    };\n    mockTransactions.push(newTransaction);\n    return newTransaction;\n  }\n  try {\n    const response = await axios.post(`${API_BASE_URL}/transactions`, transactionData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating transaction:', error);\n    throw error;\n  }\n};\n\n// Update a transaction\nexport const updateTransaction = async (id, transactionData) => {\n  if (USE_MOCK_DATA) {\n    const index = mockTransactions.findIndex(t => t.id === id);\n    if (index === -1) {\n      throw new Error('Transaction not found');\n    }\n    mockTransactions[index] = {\n      ...transactionData,\n      id\n    };\n    return {\n      ...mockTransactions[index]\n    };\n  }\n  try {\n    const response = await axios.put(`${API_BASE_URL}/transactions/${id}`, transactionData);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating transaction ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a transaction\nexport const deleteTransaction = async id => {\n  if (USE_MOCK_DATA) {\n    const index = mockTransactions.findIndex(t => t.id === id);\n    if (index === -1) {\n      throw new Error('Transaction not found');\n    }\n    mockTransactions.splice(index, 1);\n    return {\n      success: true\n    };\n  }\n  try {\n    const response = await axios.delete(`${API_BASE_URL}/transactions/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error deleting transaction ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","USE_MOCK_DATA","mockTransactions","id","transaction_date","customer_name","customer_location","country","state_province","items","product_id","product_name","product_type","quantity","unit_price","subtotal","tax_amount","total_amount","tax_rate","getTransactions","response","get","data","error","console","getTransactionById","transaction","find","t","Error","createTransaction","transactionData","newId","Math","max","map","parseInt","toString","newTransaction","push","post","updateTransaction","index","findIndex","put","deleteTransaction","splice","success","delete"],"sources":["/Users/clarafication/Desktop/MY NEW NEW COMPUTER/Coding/E-Commerce-Tax-Calculator/client/src/services/TransactionService/transactionService.js"],"sourcesContent":["import axios from 'axios';\nimport { API_BASE_URL, USE_MOCK_DATA } from '../../config';\n\n// Mock transaction data and service functions\nconst mockTransactions = [\n  {\n    id: '1',\n    transaction_date: '2023-05-15',\n    customer_name: 'John Doe',\n    customer_location: {\n      country: 'US',\n      state_province: 'CA'\n    },\n    items: [\n      {\n        product_id: '101',\n        product_name: 'Premium Software License',\n        product_type: 'Digital Software',\n        quantity: 1,\n        unit_price: 199.99\n      }\n    ],\n    subtotal: 199.99,\n    tax_amount: 16.50,\n    total_amount: 216.49,\n    tax_rate: 8.25\n  },\n  {\n    id: '2',\n    transaction_date: '2023-05-20',\n    customer_name: 'Jane Smith',\n    customer_location: {\n      country: 'US',\n      state_province: 'NY'\n    },\n    items: [\n      {\n        product_id: '202',\n        product_name: 'E-book: Web Development',\n        product_type: 'E-book',\n        quantity: 1,\n        unit_price: 29.99\n      },\n      {\n        product_id: '203',\n        product_name: 'E-book: UX Design',\n        product_type: 'E-book',\n        quantity: 1,\n        unit_price: 24.99\n      }\n    ],\n    subtotal: 54.98,\n    tax_amount: 0,\n    total_amount: 54.98,\n    tax_rate: 0\n  },\n  {\n    id: '3',\n    transaction_date: '2023-06-01',\n    customer_name: 'Bob Johnson',\n    customer_location: {\n      country: 'US',\n      state_province: 'TX'\n    },\n    items: [\n      {\n        product_id: '301',\n        product_name: 'Digital Music Album',\n        product_type: 'Digital Media',\n        quantity: 1,\n        unit_price: 12.99\n      }\n    ],\n    subtotal: 12.99,\n    tax_amount: 0.81,\n    total_amount: 13.80,\n    tax_rate: 6.25\n  }\n];\n\n// Get all transactions\nexport const getTransactions = async () => {\n  if (USE_MOCK_DATA) {\n    return [...mockTransactions];\n  }\n  \n  try {\n    const response = await axios.get(`${API_BASE_URL}/transactions`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching transactions:', error);\n    throw error;\n  }\n};\n\n// Get a transaction by ID\nexport const getTransactionById = async (id) => {\n  if (USE_MOCK_DATA) {\n    const transaction = mockTransactions.find(t => t.id === id);\n    if (!transaction) {\n      throw new Error('Transaction not found');\n    }\n    return { ...transaction };\n  }\n  \n  try {\n    const response = await axios.get(`${API_BASE_URL}/transactions/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching transaction ${id}:`, error);\n    throw error;\n  }\n};\n\n// Create a new transaction\nexport const createTransaction = async (transactionData) => {\n  if (USE_MOCK_DATA) {\n    const newId = (Math.max(...mockTransactions.map(t => parseInt(t.id))) + 1).toString();\n    const newTransaction = { ...transactionData, id: newId };\n    mockTransactions.push(newTransaction);\n    return newTransaction;\n  }\n  \n  try {\n    const response = await axios.post(`${API_BASE_URL}/transactions`, transactionData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating transaction:', error);\n    throw error;\n  }\n};\n\n// Update a transaction\nexport const updateTransaction = async (id, transactionData) => {\n  if (USE_MOCK_DATA) {\n    const index = mockTransactions.findIndex(t => t.id === id);\n    if (index === -1) {\n      throw new Error('Transaction not found');\n    }\n    mockTransactions[index] = { ...transactionData, id };\n    return { ...mockTransactions[index] };\n  }\n  \n  try {\n    const response = await axios.put(`${API_BASE_URL}/transactions/${id}`, transactionData);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating transaction ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a transaction\nexport const deleteTransaction = async (id) => {\n  if (USE_MOCK_DATA) {\n    const index = mockTransactions.findIndex(t => t.id === id);\n    if (index === -1) {\n      throw new Error('Transaction not found');\n    }\n    mockTransactions.splice(index, 1);\n    return { success: true };\n  }\n  \n  try {\n    const response = await axios.delete(`${API_BASE_URL}/transactions/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error deleting transaction ${id}:`, error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}