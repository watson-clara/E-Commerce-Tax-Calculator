{"ast":null,"code":"// Mock transaction data and service functions\nconst mockTransactions = [{\n  id: '1',\n  transaction_date: '2023-05-15',\n  customer_name: 'John Doe',\n  customer_location: {\n    country: 'US',\n    state_province: 'CA'\n  },\n  items: [{\n    product_id: '101',\n    product_name: 'Premium Software License',\n    product_type: 'Digital Software',\n    quantity: 1,\n    unit_price: 199.99\n  }],\n  subtotal: 199.99,\n  tax_amount: 16.50,\n  total_amount: 216.49,\n  tax_rate: 8.25\n}, {\n  id: '2',\n  transaction_date: '2023-05-20',\n  customer_name: 'Jane Smith',\n  customer_location: {\n    country: 'US',\n    state_province: 'NY'\n  },\n  items: [{\n    product_id: '202',\n    product_name: 'E-book: Web Development',\n    product_type: 'E-book',\n    quantity: 1,\n    unit_price: 29.99\n  }, {\n    product_id: '203',\n    product_name: 'E-book: UX Design',\n    product_type: 'E-book',\n    quantity: 1,\n    unit_price: 24.99\n  }],\n  subtotal: 54.98,\n  tax_amount: 0,\n  total_amount: 54.98,\n  tax_rate: 0\n}, {\n  id: '3',\n  transaction_date: '2023-06-01',\n  customer_name: 'Bob Johnson',\n  customer_location: {\n    country: 'US',\n    state_province: 'TX'\n  },\n  items: [{\n    product_id: '301',\n    product_name: 'Digital Music Album',\n    product_type: 'Digital Media',\n    quantity: 1,\n    unit_price: 12.99\n  }],\n  subtotal: 12.99,\n  tax_amount: 0.81,\n  total_amount: 13.80,\n  tax_rate: 6.25\n}];\n\n// Get all transactions\nexport const getTransactions = async () => {\n  return [...mockTransactions];\n};\n\n// Add a new transaction\nexport const addTransaction = async transactionData => {\n  const newId = (Math.max(...mockTransactions.map(t => parseInt(t.id))) + 1).toString();\n  const newTransaction = {\n    ...transactionData,\n    id: newId\n  };\n  mockTransactions.push(newTransaction);\n  return newTransaction;\n};\n\n// Get a transaction by ID\nexport const getTransaction = async id => {\n  const transaction = mockTransactions.find(t => t.id === id);\n  if (!transaction) {\n    throw new Error('Transaction not found');\n  }\n  return {\n    ...transaction\n  };\n};\n\n// Delete a transaction\nexport const deleteTransaction = async id => {\n  const index = mockTransactions.findIndex(t => t.id === id);\n  if (index === -1) {\n    throw new Error('Transaction not found');\n  }\n  mockTransactions.splice(index, 1);\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["mockTransactions","id","transaction_date","customer_name","customer_location","country","state_province","items","product_id","product_name","product_type","quantity","unit_price","subtotal","tax_amount","total_amount","tax_rate","getTransactions","addTransaction","transactionData","newId","Math","max","map","t","parseInt","toString","newTransaction","push","getTransaction","transaction","find","Error","deleteTransaction","index","findIndex","splice","success"],"sources":["/Users/clarafication/Desktop/MY NEW NEW COMPUTER/Coding/E-Commerce-Tax-Calculator/client/src/services/TransactionService/transactionService.js"],"sourcesContent":["// Mock transaction data and service functions\nconst mockTransactions = [\n  {\n    id: '1',\n    transaction_date: '2023-05-15',\n    customer_name: 'John Doe',\n    customer_location: {\n      country: 'US',\n      state_province: 'CA'\n    },\n    items: [\n      {\n        product_id: '101',\n        product_name: 'Premium Software License',\n        product_type: 'Digital Software',\n        quantity: 1,\n        unit_price: 199.99\n      }\n    ],\n    subtotal: 199.99,\n    tax_amount: 16.50,\n    total_amount: 216.49,\n    tax_rate: 8.25\n  },\n  {\n    id: '2',\n    transaction_date: '2023-05-20',\n    customer_name: 'Jane Smith',\n    customer_location: {\n      country: 'US',\n      state_province: 'NY'\n    },\n    items: [\n      {\n        product_id: '202',\n        product_name: 'E-book: Web Development',\n        product_type: 'E-book',\n        quantity: 1,\n        unit_price: 29.99\n      },\n      {\n        product_id: '203',\n        product_name: 'E-book: UX Design',\n        product_type: 'E-book',\n        quantity: 1,\n        unit_price: 24.99\n      }\n    ],\n    subtotal: 54.98,\n    tax_amount: 0,\n    total_amount: 54.98,\n    tax_rate: 0\n  },\n  {\n    id: '3',\n    transaction_date: '2023-06-01',\n    customer_name: 'Bob Johnson',\n    customer_location: {\n      country: 'US',\n      state_province: 'TX'\n    },\n    items: [\n      {\n        product_id: '301',\n        product_name: 'Digital Music Album',\n        product_type: 'Digital Media',\n        quantity: 1,\n        unit_price: 12.99\n      }\n    ],\n    subtotal: 12.99,\n    tax_amount: 0.81,\n    total_amount: 13.80,\n    tax_rate: 6.25\n  }\n];\n\n// Get all transactions\nexport const getTransactions = async () => {\n  return [...mockTransactions];\n};\n\n// Add a new transaction\nexport const addTransaction = async (transactionData) => {\n  const newId = (Math.max(...mockTransactions.map(t => parseInt(t.id))) + 1).toString();\n  const newTransaction = { ...transactionData, id: newId };\n  mockTransactions.push(newTransaction);\n  return newTransaction;\n};\n\n// Get a transaction by ID\nexport const getTransaction = async (id) => {\n  const transaction = mockTransactions.find(t => t.id === id);\n  if (!transaction) {\n    throw new Error('Transaction not found');\n  }\n  return { ...transaction };\n};\n\n// Delete a transaction\nexport const deleteTransaction = async (id) => {\n  const index = mockTransactions.findIndex(t => t.id === id);\n  if (index === -1) {\n    throw new Error('Transaction not found');\n  }\n  mockTransactions.splice(index, 1);\n  return { success: true };\n}; "],"mappings":"AAAA;AACA,MAAMA,gBAAgB,GAAG,CACvB;EACEC,EAAE,EAAE,GAAG;EACPC,gBAAgB,EAAE,YAAY;EAC9BC,aAAa,EAAE,UAAU;EACzBC,iBAAiB,EAAE;IACjBC,OAAO,EAAE,IAAI;IACbC,cAAc,EAAE;EAClB,CAAC;EACDC,KAAK,EAAE,CACL;IACEC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,0BAA0B;IACxCC,YAAY,EAAE,kBAAkB;IAChCC,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE;EACd,CAAC,CACF;EACDC,QAAQ,EAAE,MAAM;EAChBC,UAAU,EAAE,KAAK;EACjBC,YAAY,EAAE,MAAM;EACpBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEf,EAAE,EAAE,GAAG;EACPC,gBAAgB,EAAE,YAAY;EAC9BC,aAAa,EAAE,YAAY;EAC3BC,iBAAiB,EAAE;IACjBC,OAAO,EAAE,IAAI;IACbC,cAAc,EAAE;EAClB,CAAC;EACDC,KAAK,EAAE,CACL;IACEC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,yBAAyB;IACvCC,YAAY,EAAE,QAAQ;IACtBC,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE;EACd,CAAC,EACD;IACEJ,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,mBAAmB;IACjCC,YAAY,EAAE,QAAQ;IACtBC,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE;EACd,CAAC,CACF;EACDC,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE,CAAC;EACbC,YAAY,EAAE,KAAK;EACnBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEf,EAAE,EAAE,GAAG;EACPC,gBAAgB,EAAE,YAAY;EAC9BC,aAAa,EAAE,aAAa;EAC5BC,iBAAiB,EAAE;IACjBC,OAAO,EAAE,IAAI;IACbC,cAAc,EAAE;EAClB,CAAC;EACDC,KAAK,EAAE,CACL;IACEC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE,qBAAqB;IACnCC,YAAY,EAAE,eAAe;IAC7BC,QAAQ,EAAE,CAAC;IACXC,UAAU,EAAE;EACd,CAAC,CACF;EACDC,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE,KAAK;EACnBC,QAAQ,EAAE;AACZ,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,OAAO,CAAC,GAAGjB,gBAAgB,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMkB,cAAc,GAAG,MAAOC,eAAe,IAAK;EACvD,MAAMC,KAAK,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGtB,gBAAgB,CAACuB,GAAG,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACvB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEyB,QAAQ,CAAC,CAAC;EACrF,MAAMC,cAAc,GAAG;IAAE,GAAGR,eAAe;IAAElB,EAAE,EAAEmB;EAAM,CAAC;EACxDpB,gBAAgB,CAAC4B,IAAI,CAACD,cAAc,CAAC;EACrC,OAAOA,cAAc;AACvB,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAO5B,EAAE,IAAK;EAC1C,MAAM6B,WAAW,GAAG9B,gBAAgB,CAAC+B,IAAI,CAACP,CAAC,IAAIA,CAAC,CAACvB,EAAE,KAAKA,EAAE,CAAC;EAC3D,IAAI,CAAC6B,WAAW,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,OAAO;IAAE,GAAGF;EAAY,CAAC;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAG,MAAOhC,EAAE,IAAK;EAC7C,MAAMiC,KAAK,GAAGlC,gBAAgB,CAACmC,SAAS,CAACX,CAAC,IAAIA,CAAC,CAACvB,EAAE,KAAKA,EAAE,CAAC;EAC1D,IAAIiC,KAAK,KAAK,CAAC,CAAC,EAAE;IAChB,MAAM,IAAIF,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACAhC,gBAAgB,CAACoC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;EACjC,OAAO;IAAEG,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}